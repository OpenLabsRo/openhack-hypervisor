#!/bin/bash
set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VERSION_FILE="${PROJECT_ROOT}/VERSION"
DATE_PREFIX="$(date '+%y.%m.%d')"

usage() {
    cat <<USAGE
Usage: ./RELEASE [--set VERSION] [--no-git]

Without arguments, bumps VERSION to the next YY.MM.DD.B value (B increments
within the same day, starting at 0). With --set, writes the provided version
verbatim. Unless --no-git is supplied, the script commits, tags, and pushes the
new version with name v<version>.
USAGE
}

trim() {
    local value="$1"
    value="${value//$'\r'/}"
    value="${value## }"
    value="${value%% }"
    printf '%s' "$value"
}

MANUAL_VERSION=""
GIT_PUSH=1

while [[ $# -gt 0 ]]; do
    case "$1" in
        --set)
            if [[ $# -lt 2 ]]; then
                echo "missing value for --set" >&2
                usage
                exit 1
            fi
            MANUAL_VERSION="$(trim "$2")"
            shift 2
            ;;
        --no-git)
            GIT_PUSH=0
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "unknown argument: $1" >&2
            usage
            exit 1
            ;;
    esac
done

if (( GIT_PUSH )); then
    if [[ -n "$(git -C "${PROJECT_ROOT}" status --porcelain)" ]]; then
        echo "git working tree must be clean before bumping version" >&2
        exit 1
    fi
fi

if [[ -n "${MANUAL_VERSION}" ]]; then
    NEW_VERSION="${MANUAL_VERSION}"
else
    NEXT_BUILD=0

    if [[ -f "${VERSION_FILE}" ]]; then
        CURRENT="$(trim "$(<"${VERSION_FILE}")")"
        if [[ -n "${CURRENT}" ]]; then
            IFS='.' read -r curYY curMM curDD curBuild <<< "${CURRENT}."
            CURRENT_PREFIX="${curYY}.${curMM}.${curDD}"

            if [[ "${CURRENT_PREFIX}" == "${DATE_PREFIX}" ]]; then
                if [[ -n "${curBuild}" && ${curBuild} =~ ^[0-9]+$ ]]; then
                    NEXT_BUILD=$((curBuild + 1))
                fi
            fi
        fi
    fi

    NEW_VERSION="${DATE_PREFIX}.${NEXT_BUILD}"
fi

echo "${NEW_VERSION}" > "${VERSION_FILE}"
printf 'VERSION updated to %s\n' "${NEW_VERSION}"

if (( GIT_PUSH )); then
    git -C "${PROJECT_ROOT}" add VERSION
    git -C "${PROJECT_ROOT}" commit -m "release: ${NEW_VERSION}" >/dev/null
    git -C "${PROJECT_ROOT}" tag -a "v${NEW_VERSION}" -m "Release ${NEW_VERSION}"
    git -C "${PROJECT_ROOT}" push
    git -C "${PROJECT_ROOT}" push origin "v${NEW_VERSION}"
    printf 'Pushed commit and tag v%s\n' "${NEW_VERSION}"
fi
